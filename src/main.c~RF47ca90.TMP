/*********************************************************************************************************************
*   
*   三电感小车,后轮差速控制转向
* 
********************************************************************************************************************/

#include "headfile.h"

uint16 setspeed;  //设定速度
uint16 nowspeed;  //当前速度
uint16 rspeed;   //速度计数

uint16 speedkp  = 200;
uint16 speedkd  = 5;  //速度调节PD值
uint16 newspeedpwm;   //速度PWM
uint16 oldspeedpwm;   //上一次速度PWM

uint16 dianjispeed;
uint16 dcnt,ledcnt;

// 转向AD控制参数
uint16   AD_val_1=0;
uint16   AD_val_2=0;
uint16   AD_val_3=0;
uint16   adtmp1,adtmp2,adtmp3;
uint16   dis_AD_val_1,dis_AD_val_2,dis_AD_val_3 ;
uint16   disgy_AD_val_1,disgy_AD_val_2,disgy_AD_val_3 ;
uint16   AD_val_1_min=0;
uint16   AD_val_2_min=0;
uint16   AD_val_3_min=0;

uint16   AD_val_1_max=0;
uint16   AD_val_2_max=0;
uint16   AD_val_3_max=0; 

int16 GYROSCOPE_OFFSET_X;
int16 GYROSCOPE_OFFSET_Z;
int16 angle6550,angle_x;
int16 xgout=1000;   //MPU6050六轴参数  x轴角速度
int16 ygout=1000;
int16 zgout=1000;
int16 xaout=-1000;   //x轴加速度
int16 yaout=-1000;
int16 zaout=-1000;
int16 GRAVITY_OFFSET = 0;
int16 disangle;
float  g_fGravityAngle;
float  gyroscope_rate = 0,gyroscope_rat = 0;
extern uint32 i2cget;
//******Kalman滤波******//
//-------------------------------------------------------
static  float Q_angle=0.001, Q_gyro=0.001, R_angle=5, dt=0.015;
	//Q增大，动态响应增大
static float Pk[2][2] = { {1, 0}, {0, 1 }};
static float Pdot[4] ={0,0,0,0};
static float q_bias=0, angle_err, PCt_0, PCt_1, E, K_0, K_1, t_0, t_1;
float Angle,Angle_Speed,Car_Angle=0;
float Turn_Speed;
int16 disTurn_Speed;
////////////////////////////////////////////////////////////////////////////////////////

////////////////控制参数 ////////////////
uint16 rkp3= 22;  //   5  转向PD参数 直道 放大10倍
uint16 rkd3= 8; // 160

uint16 rkp2=26;    //9  转向PD参数 小弯道
uint16 rkd2=7;  //100; //130

uint16 rkp1=30;    //6  转向PD参数 大弯道
uint16 rkd1=6;  //45

uint16  DuoP;   //
uint16  DuoD;

unsigned char  Dir_last=0;
int16  dir_error_pre=0;
int16  dir_error=0;
int16 dis_error;
unsigned char zz;

int16 turnpwm_max = 800;  //左右PWM差的最大值
int16 turnpwm;  //转向PWM值
int16 tmpturnpwm;
uint16 setspeedhigh = 1500;
uint16 setspeedlow  = 1500;
uint16 leftspeed,rightspeed,nowspeed;
uint16 speedcnt;

/////////////////////////////////////////////

int16 MPU6050_Get_Angle(float x,float y,float z,uint8 dir);
void AngleCalculate(void);
void Kalman_Filter(float angle_m,float gyro_m);
void delayms(uint32  ms);
void MPU6050_Init(void);
int16 MPU6050_GetDoubleData(uint8 Addr);
void getangle();
void GPIO_Init();
void PWM_Init();
void FTM_Init();
void AD_Init();
void get_min();
void get_max();
void run();
void disnowval();
void roadturncal();  //转向控制程序

int main(void)
{   int16 ii;
    int32 xgtemp,zgtemp;
    dianjispeed=setspeedhigh;
    get_clk();              //获取时钟频率 必须执行
    DisableInterrupts;   //禁止总中断 
    delayms(400);
    GPIO_Init();
    PWM_Init();
    FTM_Init();
    OLED_Init();
    pit_init_ms(pit0,3);/// 定时器0中断 3ms
    set_irq_priority(PIT_CH0_IRQn,1);	//设置pit0优先级
    //enable_irq(PIT_CH0_IRQn);			//开启pit0中断c
    AD_Init();
    OLED_Fill(0x00);
    /////////////////////////
    MPU6050_Init(); 
    xgtemp=0;
    zgtemp=0;
    for(ii=0;ii<100;ii++)
    {  zgtemp += MPU6050_GetDoubleData(GYRO_ZOUT_H);//读Y轴角速度，转向
       i2c_delay();
    }
    GYROSCOPE_OFFSET_Z = zgtemp/100;        //静态X轴角速度值，直立，理论上为0，但实际可能不为0
    OLED_P6x8Str(0,0,"Zg_org:");
    OLED_Print_Num1(50,0,GYROSCOPE_OFFSET_Z);
    EnableInterrupts;
    ///// 检测电感最小值  /////////
    OLED_P6x8Str(0,2,"Get  Min  ADVAL");
    get_min();
    ///////  检测电感最大值
    OLED_P6x8Str(0,4,"Get  Max  ADVAL");
    get_max();
    ///////  清屏，显示当前测量值，摇杆向下小车开始前进  ///
    OLED_Fill(0x00);
    OLED_P6x8Str(0,0,"L_max       L_min");
    OLED_P6x8Str(0,1,"R_max       R_min");
    OLED_P6x8Str(0,2,"C_max       C_min");
    OLED_Print_Num1(30,0,AD_val_1_max);
    OLED_Print_Num1(90,0,AD_val_1_min);
    OLED_Print_Num1(30,1,AD_val_2_max);
    OLED_Print_Num1(90,1,AD_val_2_min);    
    OLED_Print_Num1(30,2,AD_val_3_max);
    OLED_Print_Num1(90,2,AD_val_3_min); 
    while(1)
    { adtmp1=0;
      adtmp2=0;
      adtmp3=0;
      for(ii=0;ii<15;ii++)
      {
        AD_val_1 = ad_ave(ADC0_SE12, ADC_12bit,30);
        AD_val_2 = ad_ave(ADC0_SE14, ADC_12bit,30); 
        AD_val_3 = ad_ave(ADC0_SE13, ADC_12bit,30);
        adtmp1= adtmp1+ AD_val_1;
        adtmp2= adtmp2+ AD_val_2;
        adtmp3= adtmp3+ AD_val_3;
      } 
      AD_val_1 = adtmp1/15;
      AD_val_2 = adtmp2/15;
      AD_val_3 = adtmp3/15;
      if(AD_val_1>AD_val_1_max)		AD_val_1=AD_val_1_max;
      if(AD_val_2>AD_val_2_max)		AD_val_2=AD_val_2_max;
      if(AD_val_3>AD_val_3_max)		AD_val_3=AD_val_3_max;
      if(AD_val_1<AD_val_1_min)		AD_val_1=AD_val_1_min;
      if(AD_val_2<AD_val_2_min)		AD_val_2=AD_val_2_min;			  
      if(AD_val_3<AD_val_3_min)		AD_val_3=AD_val_3_min;
       //归一化
      dis_AD_val_1=100*(AD_val_1 - AD_val_1_min)/(AD_val_1_max-AD_val_1_min);
      dis_AD_val_2=100*(AD_val_2 - AD_val_2_min)/(AD_val_2_max-AD_val_2_min);
      dis_AD_val_3=100*(AD_val_3 - AD_val_3_min)/(AD_val_3_max-AD_val_3_min);

      OLED_P6x8Str(0,3, "Val:");
      OLED_Print_Num1(0,4,AD_val_1);
      OLED_Print_Num1(40,4,AD_val_3);
      OLED_Print_Num1(80,4,AD_val_2);
      OLED_P6x8Str(0,5, "GuiYi:");
      OLED_Print_Num1(0,6,dis_AD_val_1);
      OLED_Print_Num1(40,6,dis_AD_val_3);
      OLED_Print_Num1(80,6,dis_AD_val_2);     
      delayms(500);
      if(gpio_get(E6)==0)  
      { systick_delay_ms(30);
        break;
      }
    }
    //// 小车开始前进
    OLED_Fill(0x00); 
    OLED_P6x8Str(0,0,"Zg_org:");
    OLED_Print_Num1(50,0,GYROSCOPE_OFFSET_Z);
    OLED_P6x8Str(0,1,"CAR Spd:");
    OLED_P6x8Str(0,2,"AD Val:");
    OLED_P6x8Str(0,4,"GY_Val:");
    OLED_P6x8Str(0,6,"TurnPWM");
    OLED_P6x8Str(0,7,"Tp:       Td:");
    enable_irq(PIT_CH0_IRQn);			//开启pit0中断
    while(1)
    {  disnowval();
       systick_delay_ms(200);
    }
}

void GPIO_Init()
{ //LED
  gpio_init(B1,GPO,0);  
  gpio_init(D2,GPO,0); 
  //gpio_init(E0,GPO,0); 
  gpio_init(E5,GPO,0); 
  // 摇杆按键
  gpio_init(C2,GPI,1);   //左上
  gpio_init(B4,GPI,1);   //上
  gpio_init(B5,GPI,1);   //右上
  //gpio_init(E5,GPI,1);   //右下
  gpio_init(E6,GPI,1);   //下
  
}

void PWM_Init()
{  ftm_pwm_init(ftm2,ftm_ch0,10000,0);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100）
   ftm_pwm_init(ftm2,ftm_ch1,10000,0);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100）
   ftm_pwm_init(ftm2,ftm_ch2,10000,0);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100）
   ftm_pwm_init(ftm2,ftm_ch3,10000,0);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100）
}

void FTM_Init()
{   ftm_count_init(ftm0);  //对E0引脚输入的脉冲进行计数
    ftm_count_init(ftm1);  //对E7引脚输入的脉冲进行计数
}

void AD_Init()
{  //adc_init(ADC0_SE4);
   //adc_init(ADC0_SE5);
   //adc_init(ADC0_SE6);
   adc_init(ADC0_SE12);  //左
   adc_init(ADC0_SE13);  //中
   adc_init(ADC0_SE14);  //右
}
void get_min()
{  uint16 i;
   uint32 sum=0;
   for(i=0;i<50;i++)   //Left-Min
   {
     AD_val_1 = adc_once(ADC0_SE12,ADC_12bit);
     sum+=AD_val_1;
     delayms(5);
   }
   AD_val_1_min=sum/50;
   sum=0;
   for(i=0;i<50;i++)   //Right-Min
   {
     AD_val_2 = adc_once(ADC0_SE14,ADC_12bit);
     sum+=AD_val_2;
     delayms(5);
   }
   AD_val_2_min=sum/50;
   sum=0;
   for(i=0;i<50;i++)   //Middle-Min
   {
     AD_val_3 = adc_once(ADC0_SE13,ADC_12bit);	
     sum+=AD_val_3;
     delayms(5);
   }
   AD_val_3_min=sum/50;
   sum=0;
}

void get_max()
{  uint16 i;
   for(i=0;i<1200;i++)
   {
     AD_val_1 = adc_once(ADC0_SE12,ADC_12bit);;  //左电感
     if(AD_val_1>=AD_val_1_max) 
       AD_val_1_max=AD_val_1;
     delayms(1);
     AD_val_2 = adc_once(ADC0_SE14,ADC_12bit);;  //右电感
     if(AD_val_2>=AD_val_2_max) 
       AD_val_2_max=AD_val_2;
     delayms(1);
     AD_val_3 =  adc_once(ADC0_SE13,ADC_12bit);; //中间电感	
     if(AD_val_3>=AD_val_3_max) 
       AD_val_3_max=AD_val_3;
     delayms(1);
   }
}

void disnowval()   //   左AD1    中AD3    右AD2          
{  OLED_Print_Num1(90,0,disTurn_Speed);
   OLED_Print_Num1(48,1,nowspeed);
   OLED_Print_Num1(10,3,dis_AD_val_1);
   OLED_Print_Num1(50,3,dis_AD_val_3);
   OLED_Print_Num1(90,3,dis_AD_val_2);
   OLED_Print_Num1(10,5,disgy_AD_val_1);
   OLED_Print_Num1(50,5,disgy_AD_val_3);
   OLED_Print_Num1(90,5,disgy_AD_val_2);
   OLED_Print_Num1(90,5,disgy_AD_val_2);
   OLED_Print_Num1(50,6,turnpwm); 
   OLED_Print_Num1(90,6,dis_error);  
   OLED_Print_Num1(20,7,rkp3);
   OLED_Print_Num1(90,7,rkd3);
}

void MPU6050_Init(void)
{
  i2c_init(i2c0,100*1000);
  i2c_write_reg(i2c0, MPU6050_DEV_ADDR, PWR_MGMT_1,0x00);     //写入数据2到0x50地址，从机地址为0x2D
  i2c_write_reg(i2c0, MPU6050_DEV_ADDR, PWR_MGMT_2,0x00);     //写入数据2到0x50地址，从机地址为0x2D
  i2c_write_reg(i2c0, MPU6050_DEV_ADDR, CONFIG,0x06);     //写入数据2到0x50地址，从机地址为0x2D
  i2c_write_reg(i2c0, MPU6050_DEV_ADDR, GYRO_CONFIG,0x08);     //写入数据2到0x50地址，从机地址为0x2D
  i2c_write_reg(i2c0, MPU6050_DEV_ADDR, ACCEL_CONFIG,0x08);     //写入数据2到0x50地址，从机地址为0x2D
}

int16 MPU6050_GetDoubleData(uint8 Addr)   //uint8 value = i2c_read_reg(i2c0, 0x2D, 0x50)
{
  uint16 data=0x0000;
  data=i2c_read_reg(i2c0,MPU6050_DEV_ADDR, Addr);
  data=(uint16)((data<<8)&0xff00);
  data+=i2c_read_reg(i2c0,MPU6050_DEV_ADDR, Addr+1);
  return (int16)data;//合成数据，为有符号整形数
}

int16 MPU6050_Get_Angle(float x,float y,float z,uint8 dir) 
{           
  float temp;    
  float res=0;
  switch(dir)  
  {  case 0://与自然Z轴的角度
              temp=sqrt((x*x+y*y))/z;
              res=atan(temp);
              break;
     case 1://与自然X轴的角度  
             temp=x/sqrt((y*y+z*z));
             res=atan(temp);
             break;
     case 2://与自然Y轴的角度        
            temp=y/sqrt((x*x+z*z));
            res=atan(temp);
            break;
  }
  return (res*1800/3.1416);//把弧度转换成角度,并放大10倍
}

void AngleCalculate(void)   //复杂算法
{
     Angle =  (angle6550-GRAVITY_OFFSET)/10;  //MPU6550计算出的Z轴角度，放大10倍值
     disangle = Angle * 1;
     g_fGravityAngle = Angle;
     Angle_Speed =  (xgout - GYROSCOPE_OFFSET_X)/70;//*0.048;  //X轴角速度输出值, 500度--> 65.5 = 65535/1000
     //Angle_Speed = Angle_Speed/70;//65.5;  //当前角速度 0.16   //0.0235 是转换角度的比例值 0.005是控制周期
     gyroscope_rate = Angle_Speed;  //当前角速度
     gyroscope_rat =gyroscope_rat + gyroscope_rate * 0.006; //-    //积分角速度得到角度
     Kalman_Filter(Angle,Angle_Speed);            //调用卡尔曼滤波函数 
     angle_x = Car_Angle*10;
}

void Kalman_Filter(float angle_m,float gyro_m)			
{
	Car_Angle+=(gyro_m-q_bias) * dt; ///预测值
	Pdot[0]=Q_angle - Pk[0][1] - Pk[1][0];
	Pdot[1]=- Pk[1][1];
	Pdot[2]=- Pk[1][1];
	Pdot[3]=Q_gyro;
	
	Pk[0][0] += Pdot[0] * dt;
	Pk[0][1] += Pdot[1] * dt;
	Pk[1][0] += Pdot[2] * dt;
	Pk[1][1] += Pdot[3] * dt;
	
	angle_err = angle_m -Car_Angle;///测量值-预测值
	
	PCt_0 =  Pk[0][0];
	PCt_1 =  Pk[1][0];
	
	E = R_angle + PCt_0;
	
	K_0 = PCt_0 / E; ///卡尔曼增益
	K_1 = PCt_1 / E;
	
	t_0 = PCt_0;
	t_1 = Pk[0][1];

	Pk[0][0] -= K_0 * t_0;
	Pk[0][1] -= K_0 * t_1;
	Pk[1][0] -= K_1 * t_0;
	Pk[1][1] -= K_1 * t_1;
	
	Car_Angle+= K_0 * angle_err; ///最优角度=预测值+卡尔曼增益*(测量值-预测值)
	q_bias	+= K_1 * angle_err;
	Angle_Speed = gyro_m-q_bias;
}

void getangle()
{ //xaout=MPU6050_GetDoubleData(ACCEL_XOUT_H);//读X轴加速度
  //yaout=MPU6050_GetDoubleData(ACCEL_YOUT_H);//读X轴加速度
  //zaout=MPU6050_GetDoubleData(ACCEL_ZOUT_H);//读X轴加速度 
  //xgout=MPU6050_GetDoubleData(GYRO_XOUT_H);//读X轴角速度,直立角速度
  //ygout=MPU6050_GetDoubleData(GYRO_YOUT_H);//读Y轴角速度，转向角速度
  //angle6550=MPU6050_Get_Angle(xaout,yaout,zaout,0);
  //AngleCalculate();//计算加速值和角度值
  zgout=MPU6050_GetDoubleData(GYRO_ZOUT_H);//读Y轴角速度，转向角速度
  Turn_Speed =  (zgout - GYROSCOPE_OFFSET_Z)/70;//*0.048;  //X轴角速度输出值, 500度--> 65.5 = 65535/1000
  disTurn_Speed = Turn_Speed *1;
}

void  delayms(uint32  ms)
{

    uint32  i, j;
    for(i = 0; i < ms; i++)
    {
        for(j = bus_clk_khz; j > 0; j--)
        {
            asm("nop");
        }
    }
}

void run()
{ dcnt++;
  ledcnt++;
  if(ledcnt==200)  //1S
  {  gpio_turn(B1); 
     gpio_turn(D2); 
     //gpio_turn(E0); 
     gpio_turn(E5); 
     ledcnt=0;
  }  
  if(dcnt>1)  //速度处理,当前没有控制
  { dcnt=0;
    speedcnt++;
    if(speedcnt>5)
  }
  else if(dcnt==1)  //方向处理
  { getangle(); 
    roadturncal();
  }
//  else if(dcnt==2) //小车角度处理（三轮车只需要转向角速度就可以
//  {   
//  }
}

void roadturncal()  //转向控制程序
{
  AD_val_1 = adc_once(ADC0_SE12,ADC_12bit);;  //左电感    
  AD_val_2 = adc_once(ADC0_SE14,ADC_12bit);;  //右边电感 
  AD_val_3 = adc_once(ADC0_SE13,ADC_12bit);;  // 中间电感 
  
  dis_AD_val_1=AD_val_1;
  dis_AD_val_2=AD_val_2;
  dis_AD_val_3=AD_val_3;
 
  //限幅
  if(AD_val_1>AD_val_1_max)		AD_val_1=AD_val_1_max;
  if(AD_val_2>AD_val_2_max)		AD_val_2=AD_val_2_max;
  if(AD_val_3>AD_val_3_max)		AD_val_3=AD_val_3_max;
 
  if(AD_val_1<AD_val_1_min)		AD_val_1=AD_val_1_min;
  if(AD_val_2<AD_val_2_min)		AD_val_2=AD_val_2_min;			  
  if(AD_val_3<AD_val_3_min)		AD_val_3=AD_val_3_min;
  
  //归一化
  AD_val_1=100*(AD_val_1 - AD_val_1_min)/(AD_val_1_max-AD_val_1_min);
  AD_val_2=100*(AD_val_2 - AD_val_2_min)/(AD_val_2_max-AD_val_2_min);
  AD_val_3=100*(AD_val_3 - AD_val_3_min)/(AD_val_3_max-AD_val_3_min);
  
  disgy_AD_val_1 = AD_val_1;
  disgy_AD_val_2 = AD_val_2;
  disgy_AD_val_3 = AD_val_3;
  
  if(AD_val_2-AD_val_1>=20)  Dir_last=1;   //上一状态为右转
  if(AD_val_1-AD_val_2>=20)  Dir_last=0;   //上一状态为左转
  
  if(Dir_last==1)  //大弯或丢线
  {
    turnpwm=turnpwm_max;
    dianjispeed=setspeedlow;
    DuoP = rkp3;
    DuoD = rkd3;
  }
  else
  {
    turnpwm = -turnpwm_max;		//保持左转
    dianjispeed=setspeedlow;
    DuoP = rkp3;
    DuoD = rkd3;
  }
  //正常处理
  if(AD_val_1>=20||AD_val_3>=20)    //???????? 只用左边和中间 ?????
  {	
      dir_error_pre=dir_error;                                            //上个偏差
      dir_error=100*(AD_val_2 - AD_val_1)/(AD_val_2 + AD_val_1);          //偏差量
      dir_error=dir_error*(dir_error*dir_error/1250.0+2)/10;
      dis_error=dir_error;
      DuoP = rkp3;
      DuoD = rkd3;  
      //turnpwm =  DuoP * dir_error/10 + DuoD * Turn_Speed;  //电感的差 和 小车转动角速度融合
      turnpwm =  DuoP * dir_error + DuoD * (dir_error - dir_error_pre);  //电感的差 和 小车转动角速度融合
      if(turnpwm>turnpwm_max) turnpwm=turnpwm_max;
      if(turnpwm<-turnpwm_max) turnpwm=-turnpwm_max;
      dianjispeed=setspeedhigh;
      tmpturnpwm = 2.5 * turnpwm;
      if(turnpwm>0)   //
      {
        ftm_pwm_duty(ftm2,ftm_ch0,dianjispeed + 0.7 * turnpwm);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100）
        ftm_pwm_duty(ftm2,ftm_ch1,0);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100）
        if(tmpturnpwm<dianjispeed)
        { ftm_pwm_duty(ftm2,ftm_ch2,dianjispeed - tmpturnpwm);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100）  
          ftm_pwm_duty(ftm2,ftm_ch3,0);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100）
        }
        else  //反转
        { ftm_pwm_duty(ftm2,ftm_ch2,0);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100）  
          ftm_pwm_duty(ftm2,ftm_ch3,tmpturnpwm-dianjispeed);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100）
        }       
      }
      else
      {  if(fabs(tmpturnpwm)<dianjispeed)
         { 
           ftm_pwm_duty(ftm2,ftm_ch0,dianjispeed + tmpturnpwm);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100）
           ftm_pwm_duty(ftm2,ftm_ch1,0);
         }
         else
         { ftm_pwm_duty(ftm2,ftm_ch0,0);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100）
           ftm_pwm_duty(ftm2,ftm_ch1,-dianjispeed -tmpturnpwm);     
         }
         ftm_pwm_duty(ftm2,ftm_ch2,dianjispeed - 0.7 * turnpwm);  //A0引脚输出50HZ PWM 占空比为百分之（500/FTM0_PRECISON*100） 
         ftm_pwm_duty(ftm2,ftm_ch3,0); 
      }
   } 
} 
